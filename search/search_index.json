{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Confu Configuration validation and generation Note PyPI package renamed All current releases will use the name confu . Please change any package requirements and imports from cfu to confu Documentation https://20c.github.io/confu/ License Copyright 2016-2022 20C, LLC Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this software except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#confu","text":"Configuration validation and generation","title":"Confu"},{"location":"#note-pypi-package-renamed","text":"All current releases will use the name confu . Please change any package requirements and imports from cfu to confu","title":"Note PyPI package renamed"},{"location":"#documentation","text":"https://20c.github.io/confu/","title":"Documentation"},{"location":"#license","text":"Copyright 2016-2022 20C, LLC Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this software except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"attributes/","text":"All confu schema attributes can be imported from the confu.schema namespace Please check these api references for a list of which attributes are available: schema.core : fundamental attributes schema.inet : attributes for network related values","title":"Attributes"},{"location":"cli/","text":"You can use confu schemas to generate and validate command line options and arguments. We currently support both argparse as well as click for this. Argparse integration In this example we load a yaml config file using munge and validate it against our schema. We use python argparse as an arg parser. import sys import argparse from confu.schema import validate from myschema import MySchema from munge.config import Config if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument(\"--config\") args = parser.parse_args() cfg = Config(read=args.config) success, errors, warnings = validate(MySchema, cfg, log=print) if not success: sys.exit(1) Argparse options from schema It is also possible to generate argparse arguments using your confu schema import argparse from confu.cli import argparse_options from myschema import MySchema from munge.config import Config if __name__ == \"__main__\": parser = argparse.ArgumentParser() argparse_options(parser, MySchema) parser.parse_args() Passing --help to test python do_stuff.py --help usage: do_stuff.py [-h] [--some-bool] [--some-list SOME_LIST] [--some-number SOME_NUMBER] [--some-string SOME_STRING] [--sub.nested-string SUB__NESTED_STRING] optional arguments: -h, --help show this help message and exit --some-bool --some-list SOME_LIST A list of integers --some-number SOME_NUMBER Some integer --some-string SOME_STRING An arbitrary string --sub.nested-string SUB__NESTED_STRING A nested string Click integration In this example we load a yaml config file using munge and validate it against our schema. We use click as an arg parser. import click from confu.schema import validate from myschema import MySchema from munge.config import Config @click.command() @click.option('--config', envvar='APPNAME_HOME', default=click.get_app_dir('appname')) def do_stuff(config): cfg = Config(read=config) success, errors, warnings = validate(MySchema, cfg, log=click.echo) if not success: raise click.ClickException(\"Configuration invalid\") if __name__ == \"__main__\": do_stuff() Click options from schema It is also possible to generate click options using your confu schema import click from confu.schema import validate from confu.cli import click_options from myschema import MySchema @click.command() @click_options(MySchema) def do_stuff(**kwargs): print(kwargs) if __name__ == \"__main__\": do_stuff() Passing --help to test python do_stuff.py --help Usage: do_stuff.py [OPTIONS] Options: --sub--nested-string STRINGATTRIBUTE A nested string --some-string STRINGATTRIBUTE An arbitrary string --some-number INTATTRIBUTE Some integer --some-list LISTATTRIBUTE A list of integers --some-bool / --no-some-bool --help Show this message and exit.","title":"CLI"},{"location":"cli/#argparse-integration","text":"In this example we load a yaml config file using munge and validate it against our schema. We use python argparse as an arg parser. import sys import argparse from confu.schema import validate from myschema import MySchema from munge.config import Config if __name__ == \"__main__\": parser = argparse.ArgumentParser() parser.add_argument(\"--config\") args = parser.parse_args() cfg = Config(read=args.config) success, errors, warnings = validate(MySchema, cfg, log=print) if not success: sys.exit(1)","title":"Argparse integration"},{"location":"cli/#argparse-options-from-schema","text":"It is also possible to generate argparse arguments using your confu schema import argparse from confu.cli import argparse_options from myschema import MySchema from munge.config import Config if __name__ == \"__main__\": parser = argparse.ArgumentParser() argparse_options(parser, MySchema) parser.parse_args() Passing --help to test python do_stuff.py --help usage: do_stuff.py [-h] [--some-bool] [--some-list SOME_LIST] [--some-number SOME_NUMBER] [--some-string SOME_STRING] [--sub.nested-string SUB__NESTED_STRING] optional arguments: -h, --help show this help message and exit --some-bool --some-list SOME_LIST A list of integers --some-number SOME_NUMBER Some integer --some-string SOME_STRING An arbitrary string --sub.nested-string SUB__NESTED_STRING A nested string","title":"Argparse options from schema"},{"location":"cli/#click-integration","text":"In this example we load a yaml config file using munge and validate it against our schema. We use click as an arg parser. import click from confu.schema import validate from myschema import MySchema from munge.config import Config @click.command() @click.option('--config', envvar='APPNAME_HOME', default=click.get_app_dir('appname')) def do_stuff(config): cfg = Config(read=config) success, errors, warnings = validate(MySchema, cfg, log=click.echo) if not success: raise click.ClickException(\"Configuration invalid\") if __name__ == \"__main__\": do_stuff()","title":"Click integration"},{"location":"cli/#click-options-from-schema","text":"It is also possible to generate click options using your confu schema import click from confu.schema import validate from confu.cli import click_options from myschema import MySchema @click.command() @click_options(MySchema) def do_stuff(**kwargs): print(kwargs) if __name__ == \"__main__\": do_stuff() Passing --help to test python do_stuff.py --help Usage: do_stuff.py [OPTIONS] Options: --sub--nested-string STRINGATTRIBUTE A nested string --some-string STRINGATTRIBUTE An arbitrary string --some-number INTATTRIBUTE Some integer --some-list LISTATTRIBUTE A list of integers --some-bool / --no-some-bool --help Show this message and exit.","title":"Click options from schema"},{"location":"examples/","text":"Use with ConfigParser instance [server] host = 127.0.0.1 port = 80 import configparser from confu.schema import Int, IpAddress, Schema, validate # this schema describes the [server] section class ServerSchema(Schema): host = IpAddress() port = Int(default=80) # this schema describes the entire config class ConfigSchema(Schema): # server schema as sub schema server = ServerSchema() # read config config = configparser.ConfigParser() config.read(\"config.cfg\") # validate config success, errors, warnings = validate(ConfigSchema(), config, log=print) Examples with SettingsManager import os from confu.util import SettingsManager # using local scope g g = {} settings_manager = SettingsManager(g) settings_manager.set_option(\"TEST_SETTING\", \"world\") print(g[\"TEST_SETTING\"]) # using Global scope settings_manager = SettingsManager(globals()) settings_manager.set_option(\"TEST_SETTING\", \"world\") print(TEST_SETTING) # setting from env os.environ[\"ENV_SETTING\"] = \"my_setting\" # setting env variable settings_manager.set_from_env(\"ENV_SETTING\") print(ENV_SETTING) # setting boolean settings_manager.set_bool(\"BOOL_SETTING\", False) print(BOOL_SETTING) # setting boolean overriden from env var from env os.environ[\"ENV_BOOL\"] = \"True\" # setting env variable settings_manager.set_bool(\"ENV_BOOL\", False) print(ENV_BOOL) # setting int from env os.environ[\"ENV_INT\"] = \"123\" # setting env variable settings_manager.set_option(\"ENV_INT\", None, envvar_type=int) print(ENV_INT) # setting default settings_manager.set_default(\"DEFAULT_SETTING\", \"my_defualt\") print(DEFAULT_SETTING) # include another file (./test.py) settings_manager.try_include(\"./test.py\") print(EXTERNAL_SETTING) File test.py settings_manager.set_option(\"EXTERNAL_SETTING\", \"my_external\") Examples with Config from confu.config import Config from confu.schema import Int, List, Schema, Str # declaring schema classes class Nested_Schema(Schema): int_attr = Int(default=10) int_attr_choices = Int(choices=[1, 2, 3], default=1, help=\"This can be 1,2 or 3\") class Example_Schema(Schema): int_attr = Int(default=123) str_attr = Str(default=\"test\") str_attr_null = Str(default=None) list_attr_w_default = List(item=Int(), default=[1, 2, 3]) nested = Nested_Schema() class Simple_Example_Schema(Schema): str_attr = Str(default=\"test\") # config without kwargs cfg = Config(Example_Schema()) print(cfg.data) # config with data and meta kwrags cfg_kwargs = Config( Simple_Example_Schema(), data={\"int_attr\": 42, \"list_attr\": [1, 2, 3]}, meta={\"meta_attr\": \"meta data\"}, ) print(cfg_kwargs.data) print(cfg_kwargs.meta) # copy the data of a schema cfg_copy = cfg.copy() print(cfg_copy) # get nested schema value nested_value = cfg.get_nested(\"nested\") print(nested_value) nested_value = cfg.get_nested(\"nonexistentnested\") print(nested_value)","title":"Examples"},{"location":"examples/#use-with-configparser-instance","text":"[server] host = 127.0.0.1 port = 80 import configparser from confu.schema import Int, IpAddress, Schema, validate # this schema describes the [server] section class ServerSchema(Schema): host = IpAddress() port = Int(default=80) # this schema describes the entire config class ConfigSchema(Schema): # server schema as sub schema server = ServerSchema() # read config config = configparser.ConfigParser() config.read(\"config.cfg\") # validate config success, errors, warnings = validate(ConfigSchema(), config, log=print)","title":"Use with ConfigParser instance"},{"location":"examples/#examples-with-settingsmanager","text":"import os from confu.util import SettingsManager # using local scope g g = {} settings_manager = SettingsManager(g) settings_manager.set_option(\"TEST_SETTING\", \"world\") print(g[\"TEST_SETTING\"]) # using Global scope settings_manager = SettingsManager(globals()) settings_manager.set_option(\"TEST_SETTING\", \"world\") print(TEST_SETTING) # setting from env os.environ[\"ENV_SETTING\"] = \"my_setting\" # setting env variable settings_manager.set_from_env(\"ENV_SETTING\") print(ENV_SETTING) # setting boolean settings_manager.set_bool(\"BOOL_SETTING\", False) print(BOOL_SETTING) # setting boolean overriden from env var from env os.environ[\"ENV_BOOL\"] = \"True\" # setting env variable settings_manager.set_bool(\"ENV_BOOL\", False) print(ENV_BOOL) # setting int from env os.environ[\"ENV_INT\"] = \"123\" # setting env variable settings_manager.set_option(\"ENV_INT\", None, envvar_type=int) print(ENV_INT) # setting default settings_manager.set_default(\"DEFAULT_SETTING\", \"my_defualt\") print(DEFAULT_SETTING) # include another file (./test.py) settings_manager.try_include(\"./test.py\") print(EXTERNAL_SETTING)","title":"Examples with SettingsManager"},{"location":"examples/#file-testpy","text":"settings_manager.set_option(\"EXTERNAL_SETTING\", \"my_external\")","title":"File test.py"},{"location":"examples/#examples-with-config","text":"from confu.config import Config from confu.schema import Int, List, Schema, Str # declaring schema classes class Nested_Schema(Schema): int_attr = Int(default=10) int_attr_choices = Int(choices=[1, 2, 3], default=1, help=\"This can be 1,2 or 3\") class Example_Schema(Schema): int_attr = Int(default=123) str_attr = Str(default=\"test\") str_attr_null = Str(default=None) list_attr_w_default = List(item=Int(), default=[1, 2, 3]) nested = Nested_Schema() class Simple_Example_Schema(Schema): str_attr = Str(default=\"test\") # config without kwargs cfg = Config(Example_Schema()) print(cfg.data) # config with data and meta kwrags cfg_kwargs = Config( Simple_Example_Schema(), data={\"int_attr\": 42, \"list_attr\": [1, 2, 3]}, meta={\"meta_attr\": \"meta data\"}, ) print(cfg_kwargs.data) print(cfg_kwargs.meta) # copy the data of a schema cfg_copy = cfg.copy() print(cfg_copy) # get nested schema value nested_value = cfg.get_nested(\"nested\") print(nested_value) nested_value = cfg.get_nested(\"nonexistentnested\") print(nested_value)","title":"Examples with Config"},{"location":"quickstart/","text":"Install Install using pip pip install confu Defining a schema from confu import schema class MySchema(schema.Schema): some_number = schema.Int(help=\"Some integer\") some_string = schema.Str(default=\"something\", help=\"An arbitrary string\") some_list = schema.List(schema.Int(), help=\"A list of integers\") some_bool = schema.Bool(default=False) class Sub(schema.Schema): nested_string = schema.Str(default=\"something nested\", help=\"A nested string\") sub = Sub() Validating a schema Once the schema is defined you can validate a dict or munge.Config instance against it from confu.schema import validate # prepare a config that will pass validation config_passes = { \"sub\": { \"nested_string\": \"what\" }, \"some_number\": 123, \"some_string\": \"hello\", \"some_list\": [ 123 ] } # prepare a config that will fail validation config_fails = { \"some_number\": \"not a number\" } # validate succesfully # success = True success, errors, warnings = validate(MySchema(), config_passes) # fail to validate # sucess = False success, errors, warnings = validate(MySchema(), config_fails) Print errors on failed validation # fail to validate and print warnings success, errors, warnings = validate(MySchema(), config_fails, log=print) Will output [Config Error] some_number: integer expected [Config Error] sub: missing 2 errors, 0 warnings in config SettingsManager SettingsManager is a utility class that allows the definition and management of scoped configuration variables that can be overridden by environment variables. Example use-cases .","title":"Quickstart"},{"location":"quickstart/#install","text":"Install using pip pip install confu","title":"Install"},{"location":"quickstart/#defining-a-schema","text":"from confu import schema class MySchema(schema.Schema): some_number = schema.Int(help=\"Some integer\") some_string = schema.Str(default=\"something\", help=\"An arbitrary string\") some_list = schema.List(schema.Int(), help=\"A list of integers\") some_bool = schema.Bool(default=False) class Sub(schema.Schema): nested_string = schema.Str(default=\"something nested\", help=\"A nested string\") sub = Sub()","title":"Defining a schema"},{"location":"quickstart/#validating-a-schema","text":"Once the schema is defined you can validate a dict or munge.Config instance against it from confu.schema import validate # prepare a config that will pass validation config_passes = { \"sub\": { \"nested_string\": \"what\" }, \"some_number\": 123, \"some_string\": \"hello\", \"some_list\": [ 123 ] } # prepare a config that will fail validation config_fails = { \"some_number\": \"not a number\" } # validate succesfully # success = True success, errors, warnings = validate(MySchema(), config_passes) # fail to validate # sucess = False success, errors, warnings = validate(MySchema(), config_fails)","title":"Validating a schema"},{"location":"quickstart/#print-errors-on-failed-validation","text":"# fail to validate and print warnings success, errors, warnings = validate(MySchema(), config_fails, log=print) Will output [Config Error] some_number: integer expected [Config Error] sub: missing 2 errors, 0 warnings in config","title":"Print errors on failed validation"},{"location":"quickstart/#settingsmanager","text":"SettingsManager is a utility class that allows the definition and management of scoped configuration variables that can be overridden by environment variables. Example use-cases .","title":"SettingsManager"},{"location":"specs/","text":"Specifications Overview Implementation of configuration schema in python. Something that can be used to validate configuration files as well as generate configuration files. We have a form of this implemented in vodka/config , should take all the schema definition code from there and re-use it here. Feature requirements Use munge for config file loading and saving Work with munge.Config Generate config file with default values (python -> yaml) Generate schema from config file (yaml -> python) Validate a config file - think django field validation but for config variables. Work with click and argparse Schema requirements Required type : config variable type (for example int or str or url ), custom types should be allowed. This will also be used as a validator when validating the config) name : config variable name (this could come from an attribute or could be the property name in the schema) Optional default : default value to use if variable is missing from config file help : arbitrary help text describing the config variable and how to use it deprecated_in : version this config variable will be deprecated added_in : version this config variable was added removed_in : version this config variable was remove choices : array of possible value choices Most yaml configurations will come with some sort of nesting. So need to be able to handle that, whether it's via lists or object literals or a combination. Type Describes the config variable type - this should be a function that can be used to validate the value. So for example could be the int function that comes with python or a custom function that can take a value and then validate it Validation When validating a config file list error messages for all validation errors. The vodka implementation has errors and warnings, might make sense to have this separation here as well. Warnings could be used for exmaple to alert the user when they have config variables in their config file that the schema knows nothing about. Config file generation Should be able to generate both ways. Python -> yaml Generate a yaml file with default values from the schema Yaml -> Python Generate a confu schema from a yaml file (name, type (str/int/float?) and possibly help from inline comments?) CLI Should work with click and argparse to generate and validate files.","title":"Specifications"},{"location":"specs/#specifications","text":"","title":"Specifications"},{"location":"specs/#overview","text":"Implementation of configuration schema in python. Something that can be used to validate configuration files as well as generate configuration files. We have a form of this implemented in vodka/config , should take all the schema definition code from there and re-use it here.","title":"Overview"},{"location":"specs/#feature-requirements","text":"Use munge for config file loading and saving Work with munge.Config Generate config file with default values (python -> yaml) Generate schema from config file (yaml -> python) Validate a config file - think django field validation but for config variables. Work with click and argparse","title":"Feature requirements"},{"location":"specs/#schema-requirements","text":"","title":"Schema requirements"},{"location":"specs/#required","text":"type : config variable type (for example int or str or url ), custom types should be allowed. This will also be used as a validator when validating the config) name : config variable name (this could come from an attribute or could be the property name in the schema)","title":"Required"},{"location":"specs/#optional","text":"default : default value to use if variable is missing from config file help : arbitrary help text describing the config variable and how to use it deprecated_in : version this config variable will be deprecated added_in : version this config variable was added removed_in : version this config variable was remove choices : array of possible value choices Most yaml configurations will come with some sort of nesting. So need to be able to handle that, whether it's via lists or object literals or a combination.","title":"Optional"},{"location":"specs/#type","text":"Describes the config variable type - this should be a function that can be used to validate the value. So for example could be the int function that comes with python or a custom function that can take a value and then validate it","title":"Type"},{"location":"specs/#validation","text":"When validating a config file list error messages for all validation errors. The vodka implementation has errors and warnings, might make sense to have this separation here as well. Warnings could be used for exmaple to alert the user when they have config variables in their config file that the schema knows nothing about.","title":"Validation"},{"location":"specs/#config-file-generation","text":"Should be able to generate both ways.","title":"Config file generation"},{"location":"specs/#python-yaml","text":"Generate a yaml file with default values from the schema","title":"Python -&gt; yaml"},{"location":"specs/#yaml-python","text":"Generate a confu schema from a yaml file (name, type (str/int/float?) and possibly help from inline comments?)","title":"Yaml -&gt; Python"},{"location":"specs/#cli","text":"Should work with click and argparse to generate and validate files.","title":"CLI"},{"location":"api/confu.cli/","text":"confu.cli functions that allow you to generate CLI parameters from a confu schema for argparse or click Functions apply_arg def apply_arg(original_key, args, config) Function for applying arguments to a config. Applies to nested configs as well. Arguments original_key ( str ): the name of the argument in the argparse Namespace args ( argparse.Namespace ): the entire Namespace, ie the result of the parser config ( Config ): the config object apply_argparse def apply_argparse(args, config) Takes the output of a parser and applies it to a Config object. Arguments args ( argparse.Namespace ): the result of parser.parse_args() config ( Config ): the config object Returns config ( Config ): now updated with args argparse_options def argparse_options(parser, schema, defaults=None, attributes=None, default_from_schema=True) Add cli options to an argparse ArgumentParser instance Arguments parser ( argparse.ArgumentParser ) schema ( Schema ) Keyword Arguments defaults ( dict ): if specified will override defaults from here attributes ( list<str> ): can hold a list of attribute names. if specified only matching attributes will be aded default_from_schema ( bool ): determines if defaults for argparser should come from the schema destination_name def destination_name(path, delimiter=__) Returns a cli option destination name from attribute path Arguments path ( list ): attribute path delimiter ( str ): delimiter for nested attributes Returns cli destination name ( str ) option_name def option_name(path, delimiter=--) Returns a cli option name from attribute path Arguments path ( list ): attribute path delimiter ( str ): delimiter for nested attributes Returns cli option name ( str ) Classes click_options click_options(builtins.object) Add cli options to a click decorated function Use like a decorator Arguments schema ( Schema ) Keyword Arguments defaults ( dict ): if specified will override defaults from here attributes ( list<str> ): can hold a list of attribute names. if specified only matching attributes will be aded Methods __call__ def __call__(self, fn) Call self as a function. __init__ def __init__(self, schema, defaults=None, attributes=None) Initialize self. See help(type(self)) for accurate signature.","title":"confu.cli"},{"location":"api/confu.cli/#confucli","text":"functions that allow you to generate CLI parameters from a confu schema for argparse or click","title":"confu.cli"},{"location":"api/confu.cli/#functions","text":"","title":"Functions"},{"location":"api/confu.cli/#apply_arg","text":"def apply_arg(original_key, args, config) Function for applying arguments to a config. Applies to nested configs as well. Arguments original_key ( str ): the name of the argument in the argparse Namespace args ( argparse.Namespace ): the entire Namespace, ie the result of the parser config ( Config ): the config object","title":"apply_arg"},{"location":"api/confu.cli/#apply_argparse","text":"def apply_argparse(args, config) Takes the output of a parser and applies it to a Config object. Arguments args ( argparse.Namespace ): the result of parser.parse_args() config ( Config ): the config object Returns config ( Config ): now updated with args","title":"apply_argparse"},{"location":"api/confu.cli/#argparse_options","text":"def argparse_options(parser, schema, defaults=None, attributes=None, default_from_schema=True) Add cli options to an argparse ArgumentParser instance Arguments parser ( argparse.ArgumentParser ) schema ( Schema ) Keyword Arguments defaults ( dict ): if specified will override defaults from here attributes ( list<str> ): can hold a list of attribute names. if specified only matching attributes will be aded default_from_schema ( bool ): determines if defaults for argparser should come from the schema","title":"argparse_options"},{"location":"api/confu.cli/#destination_name","text":"def destination_name(path, delimiter=__) Returns a cli option destination name from attribute path Arguments path ( list ): attribute path delimiter ( str ): delimiter for nested attributes Returns cli destination name ( str )","title":"destination_name"},{"location":"api/confu.cli/#option_name","text":"def option_name(path, delimiter=--) Returns a cli option name from attribute path Arguments path ( list ): attribute path delimiter ( str ): delimiter for nested attributes Returns cli option name ( str )","title":"option_name"},{"location":"api/confu.cli/#classes","text":"","title":"Classes"},{"location":"api/confu.cli/#click_options","text":"click_options(builtins.object) Add cli options to a click decorated function Use like a decorator Arguments schema ( Schema ) Keyword Arguments defaults ( dict ): if specified will override defaults from here attributes ( list<str> ): can hold a list of attribute names. if specified only matching attributes will be aded","title":"click_options"},{"location":"api/confu.cli/#methods","text":"","title":"Methods"},{"location":"api/confu.cli/#__call__","text":"def __call__(self, fn) Call self as a function.","title":"__call__"},{"location":"api/confu.cli/#__init__","text":"def __init__(self, schema, defaults=None, attributes=None) Initialize self. See help(type(self)) for accurate signature.","title":"__init__"},{"location":"api/confu.config/","text":"confu.config config management Classes Config Config(collections.abc.Mapping) class for storing and manipulating config data Instanced Attributes These attributes / properties will be available on instances of the class data ( @property ): config data, should be used for read only schema ( @property ): return a read only copy of schema Methods __eq__ def __eq__(self, other) Return self==value. __init__ def __init__(self, schema, data=None, meta=None) Arguments schema ( confu.schema ): schema object Keyword Arguments data ( dict ): dict to set initial data meta ( dict ): any additional metadata to pass along with config __ne__ def __ne__(self, other) Return self!=value. copy def copy(self) return a read only copy of data get_nested def get_nested(self, *args) get a nested value, returns None if path does not exist","title":"confu.config"},{"location":"api/confu.config/#confuconfig","text":"config management","title":"confu.config"},{"location":"api/confu.config/#classes","text":"","title":"Classes"},{"location":"api/confu.config/#config","text":"Config(collections.abc.Mapping) class for storing and manipulating config data","title":"Config"},{"location":"api/confu.config/#instanced-attributes","text":"These attributes / properties will be available on instances of the class data ( @property ): config data, should be used for read only schema ( @property ): return a read only copy of schema","title":"Instanced Attributes"},{"location":"api/confu.config/#methods","text":"","title":"Methods"},{"location":"api/confu.config/#__eq__","text":"def __eq__(self, other) Return self==value.","title":"__eq__"},{"location":"api/confu.config/#__init__","text":"def __init__(self, schema, data=None, meta=None) Arguments schema ( confu.schema ): schema object Keyword Arguments data ( dict ): dict to set initial data meta ( dict ): any additional metadata to pass along with config","title":"__init__"},{"location":"api/confu.config/#__ne__","text":"def __ne__(self, other) Return self!=value.","title":"__ne__"},{"location":"api/confu.config/#copy","text":"def copy(self) return a read only copy of data","title":"copy"},{"location":"api/confu.config/#get_nested","text":"def get_nested(self, *args) get a nested value, returns None if path does not exist","title":"get_nested"},{"location":"api/confu.exceptions/","text":"confu.exceptions Classes ApplyDefaultError ApplyDefaultError(confu.exceptions.ValidationErrorBase) Raised when an exception occured during apply_defaults Methods __str__ def __str__(self) Return str(self). SoftDependencyError SoftDependencyError(builtins.ImportError) Raised when a feature requires a dependency that is missing Methods __init__ def __init__(self, dep_name) Initialize self. See help(type(self)) for accurate signature. ValidationError ValidationError(confu.exceptions.ValidationErrorBase) Config validation error ValidationErrorBase ValidationErrorBase(builtins.ValueError) Config validation error interface Instanced Attributes These attributes / properties will be available on instances of the class pretty ( @property ): pretty formatted error message Methods __eq__ def __eq__(self, other) Return self==value. __init__ def __init__(self, attribute, path, value, reason) Arguments attribute ( Attribute ): confu attribute instance path ( list ): attribute path value ( mixed ): value that caused the validation error reason ( str ): human readable reason message for validation error ValidationWarning ValidationWarning(confu.exceptions.ValidationErrorBase) Config validation warning","title":"confu.exceptions"},{"location":"api/confu.exceptions/#confuexceptions","text":"","title":"confu.exceptions"},{"location":"api/confu.exceptions/#classes","text":"","title":"Classes"},{"location":"api/confu.exceptions/#applydefaulterror","text":"ApplyDefaultError(confu.exceptions.ValidationErrorBase) Raised when an exception occured during apply_defaults","title":"ApplyDefaultError"},{"location":"api/confu.exceptions/#methods","text":"","title":"Methods"},{"location":"api/confu.exceptions/#__str__","text":"def __str__(self) Return str(self).","title":"__str__"},{"location":"api/confu.exceptions/#softdependencyerror","text":"SoftDependencyError(builtins.ImportError) Raised when a feature requires a dependency that is missing","title":"SoftDependencyError"},{"location":"api/confu.exceptions/#methods_1","text":"","title":"Methods"},{"location":"api/confu.exceptions/#__init__","text":"def __init__(self, dep_name) Initialize self. See help(type(self)) for accurate signature.","title":"__init__"},{"location":"api/confu.exceptions/#validationerror","text":"ValidationError(confu.exceptions.ValidationErrorBase) Config validation error","title":"ValidationError"},{"location":"api/confu.exceptions/#validationerrorbase","text":"ValidationErrorBase(builtins.ValueError) Config validation error interface","title":"ValidationErrorBase"},{"location":"api/confu.exceptions/#instanced-attributes","text":"These attributes / properties will be available on instances of the class pretty ( @property ): pretty formatted error message","title":"Instanced Attributes"},{"location":"api/confu.exceptions/#methods_2","text":"","title":"Methods"},{"location":"api/confu.exceptions/#__eq__","text":"def __eq__(self, other) Return self==value.","title":"__eq__"},{"location":"api/confu.exceptions/#__init___1","text":"def __init__(self, attribute, path, value, reason) Arguments attribute ( Attribute ): confu attribute instance path ( list ): attribute path value ( mixed ): value that caused the validation error reason ( str ): human readable reason message for validation error","title":"__init__"},{"location":"api/confu.exceptions/#validationwarning","text":"ValidationWarning(confu.exceptions.ValidationErrorBase) Config validation warning","title":"ValidationWarning"},{"location":"api/confu.generator/","text":"confu.generator Schema to data generators Functions generate def generate(schema, generator=None) generate config shortcut function Arguments schema ( Schema ): confu schema object Keyword Arguments generator ( ConfigGenerator ): generator object, if non is supplied will instantiate a ConfigGenerator instance itself Returns generated config ( dict ) Classes ConfigGenerator ConfigGenerator(builtins.object) Generate config from schema using default values Methods __init__ def __init__(self) Initialize self. See help(type(self)) for accurate signature. generate def generate(self, schema) Generate confug from schema using default values Arguments schema ( Schema|Attribute ): confu schema object Returns generated config dict","title":"confu.generator"},{"location":"api/confu.generator/#confugenerator","text":"Schema to data generators","title":"confu.generator"},{"location":"api/confu.generator/#functions","text":"","title":"Functions"},{"location":"api/confu.generator/#generate","text":"def generate(schema, generator=None) generate config shortcut function Arguments schema ( Schema ): confu schema object Keyword Arguments generator ( ConfigGenerator ): generator object, if non is supplied will instantiate a ConfigGenerator instance itself Returns generated config ( dict )","title":"generate"},{"location":"api/confu.generator/#classes","text":"","title":"Classes"},{"location":"api/confu.generator/#configgenerator","text":"ConfigGenerator(builtins.object) Generate config from schema using default values","title":"ConfigGenerator"},{"location":"api/confu.generator/#methods","text":"","title":"Methods"},{"location":"api/confu.generator/#__init__","text":"def __init__(self) Initialize self. See help(type(self)) for accurate signature.","title":"__init__"},{"location":"api/confu.generator/#generate_1","text":"def generate(self, schema) Generate confug from schema using default values Arguments schema ( Schema|Attribute ): confu schema object Returns generated config dict","title":"generate"},{"location":"api/confu.schema.core/","text":"confu.schema.core Fundamental schema attributes These can be imported directly from confu.schema Functions apply_default def apply_default(config, attribute, path) Apply attribute default to config dict at the specified path Arguments config ( dict ): the config dictonary attribute ( Attribute ): attribute instance path ( list(str) ): full path of the attribute in the schema apply_defaults def apply_defaults(schema, config, debug=False) Take a config object and apply a schema's default values to keys that are missing. Arguments schema ( Schema ): schema instance config ( dict ): the config dictonary validate def validate(schema, config, raise_errors=False, log=None, **kwargs) Helper function that allows schema validation to either collect or raise errors Arguments schema ( Schema ): schema instance config ( dict|munge.Config ) Keyword Arguments raise_errors ( bool=False ): if True will raise a ValidationError exception if it encounters validation errors If False it will instead collect errors and warnings and return a tuple: success(bool), errors(CollectValidationExceptions), warnings(CollectValidationException) log ( callable ): function to use to log errors, will be passed a str message any additional kwargs will be passed on to Schema.validate Classes Attribute Attribute(builtins.object) Base confu schema attribute. All other schema attributes should extend this Instanced Attributes These attributes / properties will be available on instances of the class choices ( @property ): Return a list of possible value choices for this attribute Will return an empty list if the attribute is NOT limited by choices - cli ( @property ): Returns whether or not the attribute is available in as a cli argument when confu is used to generated argparse or click arguments - default ( @property ): Return the default value for this attribute - default_is_none ( @property ): None - has_default ( @property ): None Methods __init__ def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually Bool Bool(confu.schema.core.Attribute) Attribute that requires a boolean value Methods __init__ def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually CollectValidationExceptions CollectValidationExceptions(confu.schema.core.ValidationErrorProcessor) This validation error processor will store all errors and warnings it encounters and NOT raise any exceptions Methods __init__ def __init__(self) Initialize self. See help(type(self)) for accurate signature. Dict Dict(confu.schema.core.Schema) Wrapper for schema with arbitrary keys For this the item property needs to be set. Methods __init__ def __init__(self, name=None, item=None, *args, **kwargs) Initialize schema Keyword Arguments item ( Attribute ): allows you to specify an arbitrary attribute to use for all values in the schema. This is only allowed if your schema does NOT explicitly set any attributes in it's definition name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed Directory Directory(confu.schema.core.Str) Attribute that requires an existing directory path Keyword Arguments require_exist ('bool=True'): if True directory needs to exist create ( octal ): if set, instead of raising a ValidationError on a non-existing directory, attempt to create directory first using the value passed as mode (chmod) e.g., create=0o777 Methods __init__ def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually File File(confu.schema.core.Str) Attribute that requires a file to exist at path Keyword Attributes require_exist ('bool=True'): if True file needs to exist Methods __init__ def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually Float Float(confu.schema.core.Attribute) Attribute that requires a float value Methods validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually Int Int(confu.schema.core.Attribute) Attribute that requires an integer value Methods validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually List List(confu.schema.core.Attribute) Attribute that requires a list value Instanced Attributes These attributes / properties will be available on instances of the class cli ( @property ): None Methods __init__ def __init__(self, name=None, item=None, **kwargs) Initialize List attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. item ( Attribute ): allows you to specify an arbitrary attribute to use for all values in the list. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually ProxySchema ProxySchema(confu.schema.core.Schema) An object that can be used in place of a schema in order to dynamically obtain a schema instance from somewhere else during validate Methods schema def schema(self, config) return a schema instance validate def validate(self, config, path=None, errors=None, warnings=None) call validate on the schema returned by self.schema Schema Schema(confu.schema.core.Attribute) Describes a confu schema. Instantiate confu attributes as properties of the schema. As the schema itself is a confu attribute, you may nest schemas within schemas Example class MySchema(Schema): str_attr = Str() Methods __init__ def __init__(self, *args, **kwargs) Initialize schema Keyword Arguments item ( Attribute ): allows you to specify an arbitrary attribute to use for all values in the schema. This is only allowed if your schema does NOT explicitly set any attributes in it's definition name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, config, path=None, errors=None, warnings=None) Validate config data against this schema Attributes config ( dict ): config to validate Keyword Attributes path ( list ): current path in the config data, this can be ignored on the initial call and will be set automatically on any subsequent calls (nested schemas) errors ( ValidationErrorProcessor ) warnigns ( ValidationErrorProcessor ) Str Str(confu.schema.core.Attribute) Attribute that requires a string value Keyword Attributes: - blank : if True allow \"\" as a value Instanced Attributes These attributes / properties will be available on instances of the class default_is_blank ( @property ): None Methods __init__ def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually TimeDuration TimeDuration(confu.schema.core.Attribute) Attribute that requires an TimeDuration type value. TimeDuration is defined in confu.types Instanced Attributes These attributes / properties will be available on instances of the class choices ( @property ): None default ( @property ): None Methods validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually ValidationErrorProcessor ValidationErrorProcessor(builtins.object) This the default validation error processor, it will raise an exception when a warning or error is encountered","title":"confu.schema.core"},{"location":"api/confu.schema.core/#confuschemacore","text":"Fundamental schema attributes These can be imported directly from confu.schema","title":"confu.schema.core"},{"location":"api/confu.schema.core/#functions","text":"","title":"Functions"},{"location":"api/confu.schema.core/#apply_default","text":"def apply_default(config, attribute, path) Apply attribute default to config dict at the specified path Arguments config ( dict ): the config dictonary attribute ( Attribute ): attribute instance path ( list(str) ): full path of the attribute in the schema","title":"apply_default"},{"location":"api/confu.schema.core/#apply_defaults","text":"def apply_defaults(schema, config, debug=False) Take a config object and apply a schema's default values to keys that are missing. Arguments schema ( Schema ): schema instance config ( dict ): the config dictonary","title":"apply_defaults"},{"location":"api/confu.schema.core/#validate","text":"def validate(schema, config, raise_errors=False, log=None, **kwargs) Helper function that allows schema validation to either collect or raise errors Arguments schema ( Schema ): schema instance config ( dict|munge.Config ) Keyword Arguments raise_errors ( bool=False ): if True will raise a ValidationError exception if it encounters validation errors If False it will instead collect errors and warnings and return a tuple: success(bool), errors(CollectValidationExceptions), warnings(CollectValidationException) log ( callable ): function to use to log errors, will be passed a str message any additional kwargs will be passed on to Schema.validate","title":"validate"},{"location":"api/confu.schema.core/#classes","text":"","title":"Classes"},{"location":"api/confu.schema.core/#attribute","text":"Attribute(builtins.object) Base confu schema attribute. All other schema attributes should extend this","title":"Attribute"},{"location":"api/confu.schema.core/#instanced-attributes","text":"These attributes / properties will be available on instances of the class choices ( @property ): Return a list of possible value choices for this attribute Will return an empty list if the attribute is NOT limited by choices - cli ( @property ): Returns whether or not the attribute is available in as a cli argument when confu is used to generated argparse or click arguments - default ( @property ): Return the default value for this attribute - default_is_none ( @property ): None - has_default ( @property ): None","title":"Instanced Attributes"},{"location":"api/confu.schema.core/#methods","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init__","text":"def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_1","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#bool","text":"Bool(confu.schema.core.Attribute) Attribute that requires a boolean value","title":"Bool"},{"location":"api/confu.schema.core/#methods_1","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___1","text":"def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_2","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#collectvalidationexceptions","text":"CollectValidationExceptions(confu.schema.core.ValidationErrorProcessor) This validation error processor will store all errors and warnings it encounters and NOT raise any exceptions","title":"CollectValidationExceptions"},{"location":"api/confu.schema.core/#methods_2","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___2","text":"def __init__(self) Initialize self. See help(type(self)) for accurate signature.","title":"__init__"},{"location":"api/confu.schema.core/#dict","text":"Dict(confu.schema.core.Schema) Wrapper for schema with arbitrary keys For this the item property needs to be set.","title":"Dict"},{"location":"api/confu.schema.core/#methods_3","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___3","text":"def __init__(self, name=None, item=None, *args, **kwargs) Initialize schema Keyword Arguments item ( Attribute ): allows you to specify an arbitrary attribute to use for all values in the schema. This is only allowed if your schema does NOT explicitly set any attributes in it's definition name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#directory","text":"Directory(confu.schema.core.Str) Attribute that requires an existing directory path Keyword Arguments require_exist ('bool=True'): if True directory needs to exist create ( octal ): if set, instead of raising a ValidationError on a non-existing directory, attempt to create directory first using the value passed as mode (chmod) e.g., create=0o777","title":"Directory"},{"location":"api/confu.schema.core/#methods_4","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___4","text":"def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_3","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#file","text":"File(confu.schema.core.Str) Attribute that requires a file to exist at path Keyword Attributes require_exist ('bool=True'): if True file needs to exist","title":"File"},{"location":"api/confu.schema.core/#methods_5","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___5","text":"def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_4","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#float","text":"Float(confu.schema.core.Attribute) Attribute that requires a float value","title":"Float"},{"location":"api/confu.schema.core/#methods_6","text":"","title":"Methods"},{"location":"api/confu.schema.core/#validate_5","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#int","text":"Int(confu.schema.core.Attribute) Attribute that requires an integer value","title":"Int"},{"location":"api/confu.schema.core/#methods_7","text":"","title":"Methods"},{"location":"api/confu.schema.core/#validate_6","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#list","text":"List(confu.schema.core.Attribute) Attribute that requires a list value","title":"List"},{"location":"api/confu.schema.core/#instanced-attributes_1","text":"These attributes / properties will be available on instances of the class cli ( @property ): None","title":"Instanced Attributes"},{"location":"api/confu.schema.core/#methods_8","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___6","text":"def __init__(self, name=None, item=None, **kwargs) Initialize List attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. item ( Attribute ): allows you to specify an arbitrary attribute to use for all values in the list. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_7","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#proxyschema","text":"ProxySchema(confu.schema.core.Schema) An object that can be used in place of a schema in order to dynamically obtain a schema instance from somewhere else during validate","title":"ProxySchema"},{"location":"api/confu.schema.core/#methods_9","text":"","title":"Methods"},{"location":"api/confu.schema.core/#schema","text":"def schema(self, config) return a schema instance","title":"schema"},{"location":"api/confu.schema.core/#validate_8","text":"def validate(self, config, path=None, errors=None, warnings=None) call validate on the schema returned by self.schema","title":"validate"},{"location":"api/confu.schema.core/#schema_1","text":"Schema(confu.schema.core.Attribute) Describes a confu schema. Instantiate confu attributes as properties of the schema. As the schema itself is a confu attribute, you may nest schemas within schemas Example class MySchema(Schema): str_attr = Str()","title":"Schema"},{"location":"api/confu.schema.core/#methods_10","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___7","text":"def __init__(self, *args, **kwargs) Initialize schema Keyword Arguments item ( Attribute ): allows you to specify an arbitrary attribute to use for all values in the schema. This is only allowed if your schema does NOT explicitly set any attributes in it's definition name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_9","text":"def validate(self, config, path=None, errors=None, warnings=None) Validate config data against this schema Attributes config ( dict ): config to validate Keyword Attributes path ( list ): current path in the config data, this can be ignored on the initial call and will be set automatically on any subsequent calls (nested schemas) errors ( ValidationErrorProcessor ) warnigns ( ValidationErrorProcessor )","title":"validate"},{"location":"api/confu.schema.core/#str","text":"Str(confu.schema.core.Attribute) Attribute that requires a string value Keyword Attributes: - blank : if True allow \"\" as a value","title":"Str"},{"location":"api/confu.schema.core/#instanced-attributes_2","text":"These attributes / properties will be available on instances of the class default_is_blank ( @property ): None","title":"Instanced Attributes"},{"location":"api/confu.schema.core/#methods_11","text":"","title":"Methods"},{"location":"api/confu.schema.core/#__init___8","text":"def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.core/#validate_10","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#timeduration","text":"TimeDuration(confu.schema.core.Attribute) Attribute that requires an TimeDuration type value. TimeDuration is defined in confu.types","title":"TimeDuration"},{"location":"api/confu.schema.core/#instanced-attributes_3","text":"These attributes / properties will be available on instances of the class choices ( @property ): None default ( @property ): None","title":"Instanced Attributes"},{"location":"api/confu.schema.core/#methods_12","text":"","title":"Methods"},{"location":"api/confu.schema.core/#validate_11","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.core/#validationerrorprocessor","text":"ValidationErrorProcessor(builtins.object) This the default validation error processor, it will raise an exception when a warning or error is encountered","title":"ValidationErrorProcessor"},{"location":"api/confu.schema.inet/","text":"confu.schema.inet Attributes that deal with networking specific values such as emails, urls and ip addresses These can be imported directly from confu.schema Requirements ipaddress for ip address validation Classes Email Email(confu.schema.core.Str) Describes an email address Methods validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually IpAddress IpAddress(confu.schema.core.Str) Describes a IPv4 or IPv6 address Methods __init__ def __init__(self, name=, protocol=None, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. protocol ( int ): ip version, can be 4, 6 or None - if it is none the attribute can hold either a v4 or a v6 IP address. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually IpNetwork IpNetwork(confu.schema.core.Str) Describes a IPv4 or IPv6 IP prefix Methods __init__ def __init__(self, name=, protocol=None, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. protocol ( int ): ip version, can be 4, 6 or None - if it is none the attribute can hold either a v4 or a v6 IP address. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually Url Url(confu.schema.core.Str) Describes a URL Methods __init__ def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed validate def validate(self, value, path, **kwargs) Currently only validates by running urlparse against it and checking that a scheme and netloc is set - and if a list of allowed schemes is provide that the scheme is valid against that list TODO: may want something more sophisticated than that - could look at django's url validator","title":"confu.schema.inet"},{"location":"api/confu.schema.inet/#confuschemainet","text":"Attributes that deal with networking specific values such as emails, urls and ip addresses These can be imported directly from confu.schema","title":"confu.schema.inet"},{"location":"api/confu.schema.inet/#requirements","text":"ipaddress for ip address validation","title":"Requirements"},{"location":"api/confu.schema.inet/#classes","text":"","title":"Classes"},{"location":"api/confu.schema.inet/#email","text":"Email(confu.schema.core.Str) Describes an email address","title":"Email"},{"location":"api/confu.schema.inet/#methods","text":"","title":"Methods"},{"location":"api/confu.schema.inet/#validate","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.inet/#ipaddress","text":"IpAddress(confu.schema.core.Str) Describes a IPv4 or IPv6 address","title":"IpAddress"},{"location":"api/confu.schema.inet/#methods_1","text":"","title":"Methods"},{"location":"api/confu.schema.inet/#__init__","text":"def __init__(self, name=, protocol=None, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. protocol ( int ): ip version, can be 4, 6 or None - if it is none the attribute can hold either a v4 or a v6 IP address. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.inet/#validate_1","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.inet/#ipnetwork","text":"IpNetwork(confu.schema.core.Str) Describes a IPv4 or IPv6 IP prefix","title":"IpNetwork"},{"location":"api/confu.schema.inet/#methods_2","text":"","title":"Methods"},{"location":"api/confu.schema.inet/#__init___1","text":"def __init__(self, name=, protocol=None, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. protocol ( int ): ip version, can be 4, 6 or None - if it is none the attribute can hold either a v4 or a v6 IP address. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.inet/#validate_2","text":"def validate(self, value, path, **kwargs) Validate a value for this attribute Will raise a ValidationError or ValidationWarning exception on validation failure Arguments value ( mixed ): the value to validate path ( list ): current path in the config schema, this is mostly used to identify where an error occured when validating against config data, you can pass an empty list to it when calling this manually","title":"validate"},{"location":"api/confu.schema.inet/#url","text":"Url(confu.schema.core.Str) Describes a URL","title":"Url"},{"location":"api/confu.schema.inet/#methods_3","text":"","title":"Methods"},{"location":"api/confu.schema.inet/#__init___2","text":"def __init__(self, name=, **kwargs) Initialize attribute Keyword Arguments name ( str ): describes the attribute name, if not specified explicitly will be set through the schema that instantiates the attribute. default ( mixed ): the default value of this attribute. Once a default value is set, schema validation will no longer raise a validation error if the attribute is missing from the configuration. choices ( list ): if specified on values in this list may be set for this attribute help ( str ): help description cli ( bool=True|function ): enable CLI support for this attribute deprecated ( str ): version id of when this attribute will be deprecated added ( str ): version id of when this attribute was added to the schema removed ( str ): version id of when this attribute will be removed","title":"__init__"},{"location":"api/confu.schema.inet/#validate_3","text":"def validate(self, value, path, **kwargs) Currently only validates by running urlparse against it and checking that a scheme and netloc is set - and if a list of allowed schemes is provide that the scheme is valid against that list TODO: may want something more sophisticated than that - could look at django's url validator","title":"validate"},{"location":"api/confu.util/","text":"confu.util utility functions / classes Functions config_parser_dict def config_parser_dict(config) Takes a configparser.ConfigParser instance and returns a dict of sections with their keys and values. Arguments config ( configparser.ConfigParsers ) Returns dict Classes SettingsManager SettingsManager(builtins.object) Scoped settings management with environment variable override support. Methods __init__ def __init__(self, scope, name=settings_manager) Arguments scope ( dict ) Keyword Arguments name ( str ): name of the variable used for the object instance, default = \"settings_manager\" set_bool def set_bool(self, name, value) Sets an option by first checking for environment variables, then checking for value already set, then going to the value argument passed. Environment variable values of \"1\", \"true\", \"y\" or \"yes\" (can be in any case) are considered True . Environment variable values of \"0\", \"false\", \"n\" or \"no\" (can be in any case) are considered False . Arguments name ( str ) value set_default def set_default(self, name, value) Sets the default value for the option if a value is not already set. Arguments name ( str ) value set_from_env def set_from_env(self, name, default=<object object at 0x7effab452340>) Sets a scope variable from an environment variable of the same name. It is useful to leave the option unset and use default if it already exists in the scope. Arguments name ( str ) Keyword Arguments default: value to be used if there is no environment variable of the same name set_option def set_option(self, name, value, envvar_type=None) Sets an option by first checking for environment variables, then checking for value already set, then going to the value argument passed. Environment variables are always strings that are first coerced to the correct type by checking the type of the value argument. If the value passed is None , then the optional envvar_type argument is checked (If you want to set the option to None , pass the envvar_type as type(None) ). Arguments name ( str ): name of variable, default = \"settings_manager\" value: If None is passed a envar_type needs to be given Keyword Arguments envvar_type try_include def try_include(self, filepath) Tries to include another file into the current scope. Arguments filepath ( str ): path to the file trying to be included.","title":"confu.util"},{"location":"api/confu.util/#confuutil","text":"utility functions / classes","title":"confu.util"},{"location":"api/confu.util/#functions","text":"","title":"Functions"},{"location":"api/confu.util/#config_parser_dict","text":"def config_parser_dict(config) Takes a configparser.ConfigParser instance and returns a dict of sections with their keys and values. Arguments config ( configparser.ConfigParsers ) Returns dict","title":"config_parser_dict"},{"location":"api/confu.util/#classes","text":"","title":"Classes"},{"location":"api/confu.util/#settingsmanager","text":"SettingsManager(builtins.object) Scoped settings management with environment variable override support.","title":"SettingsManager"},{"location":"api/confu.util/#methods","text":"","title":"Methods"},{"location":"api/confu.util/#__init__","text":"def __init__(self, scope, name=settings_manager) Arguments scope ( dict ) Keyword Arguments name ( str ): name of the variable used for the object instance, default = \"settings_manager\"","title":"__init__"},{"location":"api/confu.util/#set_bool","text":"def set_bool(self, name, value) Sets an option by first checking for environment variables, then checking for value already set, then going to the value argument passed. Environment variable values of \"1\", \"true\", \"y\" or \"yes\" (can be in any case) are considered True . Environment variable values of \"0\", \"false\", \"n\" or \"no\" (can be in any case) are considered False . Arguments name ( str ) value","title":"set_bool"},{"location":"api/confu.util/#set_default","text":"def set_default(self, name, value) Sets the default value for the option if a value is not already set. Arguments name ( str ) value","title":"set_default"},{"location":"api/confu.util/#set_from_env","text":"def set_from_env(self, name, default=<object object at 0x7effab452340>) Sets a scope variable from an environment variable of the same name. It is useful to leave the option unset and use default if it already exists in the scope. Arguments name ( str ) Keyword Arguments default: value to be used if there is no environment variable of the same name","title":"set_from_env"},{"location":"api/confu.util/#set_option","text":"def set_option(self, name, value, envvar_type=None) Sets an option by first checking for environment variables, then checking for value already set, then going to the value argument passed. Environment variables are always strings that are first coerced to the correct type by checking the type of the value argument. If the value passed is None , then the optional envvar_type argument is checked (If you want to set the option to None , pass the envvar_type as type(None) ). Arguments name ( str ): name of variable, default = \"settings_manager\" value: If None is passed a envar_type needs to be given Keyword Arguments envvar_type","title":"set_option"},{"location":"api/confu.util/#try_include","text":"def try_include(self, filepath) Tries to include another file into the current scope. Arguments filepath ( str ): path to the file trying to be included.","title":"try_include"}]}